#!/usr/bin/env node
 
 /**
  * Module dependencies.
  */
import app from '../app.js';
import debugLib from 'debug';
import http from 'http';
import connectDB  from '../config/database.js';


const debug = debugLib('getting-started-with-expressjs:server');
/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = (val) => {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
        return val; // Named pipe
    }
    if (port >= 0) {
        return port; // Port number
    }
    return false;
};
 
/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
 
/**
 * Create HTTP server.
 */
const server = http.createServer(app); 
/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }
 const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
 
// Handle specific listen errors
 switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
            default:
                throw error;
            }
        }; 
/**
 * Event listener for HTTP server "listening" event.
 */
const onListening = () => {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    connectDB();
    debug(`Listening on ${bind}`);
    if (typeof addr === 'string') {
        console.log(`Server is running on ${addr}`);
    } else {
        // Replace "::" (IPv6 all interfaces) with "localhost" for readability
        let host = addr.address === '::' ? 'localhost' : addr.address;
        console.log(`Server is running on http://${host}:${addr.port}/`);
    }
 };
  
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening); 